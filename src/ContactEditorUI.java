/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */




import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ahmed
 */





public class ContactEditorUI extends javax.swing.JFrame{

    /**
     * Creates new form ContactEditorUI
     */
    public ContactEditorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pP3 = new javax.swing.JTabbedPane();
        pP1 = new javax.swing.JPanel();
        datasetLabel = new javax.swing.JLabel();
        dataSource = new javax.swing.JComboBox<>();
        readButton = new javax.swing.JButton();
        attLabel = new javax.swing.JLabel();
        attribute = new javax.swing.JComboBox<>();
        action = new javax.swing.JComboBox<>();
        applyButton = new javax.swing.JButton();
        value = new javax.swing.JTextField();
        dataPanel = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        graphPanel = new javax.swing.JScrollPane();
        graphLabel = new javax.swing.JLabel();
        comboGraph = new javax.swing.JComboBox<>();
        attribute1 = new javax.swing.JComboBox<>();
        generate = new javax.swing.JButton();
        pP2 = new javax.swing.JPanel();
        transLabel = new javax.swing.JLabel();
        transPane = new javax.swing.JScrollPane();
        transZone = new javax.swing.JTextArea();
        apriori = new javax.swing.JButton();
        aprioriPane = new javax.swing.JScrollPane();
        aprioriZone = new javax.swing.JTextArea();
        pSuppLabel = new javax.swing.JLabel();
        pSuppTxt = new javax.swing.JTextField();
        suppLabel = new javax.swing.JLabel();
        suppTxt = new javax.swing.JTextField();
        timeLabel = new javax.swing.JLabel();
        timeTxt = new javax.swing.JTextField();
        rulesPane = new javax.swing.JScrollPane();
        rulesZone = new javax.swing.JTextArea();
        derLabel = new javax.swing.JLabel();
        rulesLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        resLabel = new javax.swing.JLabel();
        resPane = new javax.swing.JScrollPane();
        resZone = new javax.swing.JTextArea();
        kLabel = new javax.swing.JLabel();
        kTxt = new javax.swing.JTextField();
        meanButton = new javax.swing.JButton();
        medButton = new javax.swing.JButton();
        perfLabel = new javax.swing.JLabel();
        perfTxt = new javax.swing.JTextField();
        timeLabel2 = new javax.swing.JLabel();
        timeTxt2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        datasetLabel.setText("DATASET :");

        dataSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        readButton.setText("Read");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        attLabel.setText("Attribut :");

        attribute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        action.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        value.setEditable(false);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dataTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        dataPanel.setViewportView(dataTable);

        graphLabel.setText("Graph :");

        comboGraph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        attribute1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        generate.setText("Generate");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pP1Layout = new javax.swing.GroupLayout(pP1);
        pP1.setLayout(pP1Layout);
        pP1Layout.setHorizontalGroup(
            pP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pP1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(pP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pP1Layout.createSequentialGroup()
                        .addComponent(datasetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dataSource, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readButton)
                        .addGap(14, 14, 14)
                        .addComponent(attLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attribute, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(action, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(applyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(value, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pP1Layout.createSequentialGroup()
                        .addComponent(dataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(graphPanel)))
                .addContainerGap(105, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pP1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(graphLabel)
                .addGap(18, 18, 18)
                .addGroup(pP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attribute1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pP1Layout.createSequentialGroup()
                        .addComponent(comboGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addComponent(generate)))
                .addGap(196, 196, 196))
        );
        pP1Layout.setVerticalGroup(
            pP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pP1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datasetLabel)
                    .addComponent(dataSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(readButton)
                    .addComponent(attLabel)
                    .addComponent(attribute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(action, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applyButton)
                    .addComponent(value, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(graphPanel))
                .addGap(32, 32, 32)
                .addGroup(pP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(graphLabel)
                    .addComponent(comboGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generate))
                .addGap(18, 18, 18)
                .addComponent(attribute1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(449, Short.MAX_VALUE))
        );

        pP3.addTab("Partie I", pP1);

        transLabel.setText("Transactions :");

        transZone.setEditable(false);
        transZone.setColumns(20);
        transZone.setRows(5);
        transPane.setViewportView(transZone);

        apriori.setText("Launch");
        apriori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprioriActionPerformed(evt);
            }
        });

        aprioriZone.setEditable(false);
        aprioriZone.setColumns(20);
        aprioriZone.setRows(5);
        aprioriPane.setViewportView(aprioriZone);

        pSuppLabel.setText("%Support :");

        pSuppTxt.setText("25");

        suppLabel.setText("Support :");

        suppTxt.setEditable(false);

        timeLabel.setText("Time :");

        timeTxt.setEditable(false);

        rulesZone.setEditable(false);
        rulesZone.setColumns(20);
        rulesZone.setRows(5);
        rulesPane.setViewportView(rulesZone);

        derLabel.setText("Déroulement :");

        rulesLabel.setText("Règles d'associations :");

        javax.swing.GroupLayout pP2Layout = new javax.swing.GroupLayout(pP2);
        pP2.setLayout(pP2Layout);
        pP2Layout.setHorizontalGroup(
            pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pP2Layout.createSequentialGroup()
                .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pP2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transPane, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transLabel))
                        .addGap(49, 49, 49)
                        .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aprioriPane, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(derLabel))
                        .addGap(45, 45, 45)
                        .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rulesLabel)
                            .addComponent(rulesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pP2Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pP2Layout.createSequentialGroup()
                                .addComponent(timeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(timeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pP2Layout.createSequentialGroup()
                                .addComponent(pSuppLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pSuppTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(apriori)
                                .addGap(153, 153, 153)
                                .addComponent(suppLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(suppTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        pP2Layout.setVerticalGroup(
            pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pP2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transLabel)
                    .addComponent(derLabel)
                    .addComponent(rulesLabel))
                .addGap(18, 18, 18)
                .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rulesPane)
                    .addComponent(aprioriPane)
                    .addComponent(transPane, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pSuppLabel)
                    .addComponent(pSuppTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apriori)
                    .addComponent(suppLabel)
                    .addComponent(suppTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pP2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(timeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(440, Short.MAX_VALUE))
        );

        pP3.addTab("Partie II", pP2);

        resLabel.setText("Estimated classes :");

        resZone.setEditable(false);
        resZone.setColumns(20);
        resZone.setRows(5);
        resPane.setViewportView(resZone);

        kLabel.setText("Choose k :");

        meanButton.setText("K-means");
        meanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanButtonActionPerformed(evt);
            }
        });

        medButton.setText("K-medoids");
        medButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medButtonActionPerformed(evt);
            }
        });

        perfLabel.setText("Performance :");

        perfTxt.setEditable(false);

        timeLabel2.setText("Time :");

        timeTxt2.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resPane, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(resLabel))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(kLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(kTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(meanButton)
                                .addGap(26, 26, 26)
                                .addComponent(medButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(perfLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(perfTxt)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeTxt2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(789, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(resLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resPane, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kLabel)
                    .addComponent(kTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(meanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perfLabel)
                    .addComponent(perfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLabel2)
                    .addComponent(timeTxt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(476, Short.MAX_VALUE))
        );

        pP3.addTab("Partie III", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pP3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pP3)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    Object[][] data;
    String[][] cData;
    String[][] kData;
    ArrayList<Integer> real = new ArrayList<Integer>();
    ArrayList<Integer> ordered = new ArrayList<Integer>();
    HashMap<String, ArrayList<Integer>> classes = new HashMap<String, ArrayList<Integer>>();
    HashMap<Integer, String[]> attType = new HashMap<Integer, String[]>();
    
    public double[] getQ(Object[] att){
        double[] q = new double[2];
        ArrayList<Double> sorted = new ArrayList<Double>();
        sorted.add(Double.parseDouble((String) att[0]));
        for (int i=1;i<att.length;++i){
            double val = Double.parseDouble((String)att[i]);
            boolean b = true;
            int j=0;
            while(j<sorted.size() && b==true){
                if (val<sorted.get(j)) b=false;
                else ++j;
            }
            if (j<sorted.size()) sorted.add(j,val);
            else sorted.add(val);
        }
        if (sorted.size()%4==0) q[0] = sorted.get(sorted.size()/4);
        else q[0] = sorted.get(sorted.size()/4+1);
        if (sorted.size()%4==0) q[1] = sorted.get(sorted.size()*3/4);
        else q[1] = sorted.get((int)((float)sorted.size()*3.0/4.0)+1);
        return q;
    }
    
    public String[][] cleanData(Object[][] data, boolean first, boolean last){
        int col = data[0].length;
        int f=0;
        int l = col;
        if (first == false) {--col; f=1;}
        if (last == false) {--col; --l;}
        String[][] cData = new String[data.length][col];
        
        for (int i=f;i<l;++i){
            int realI = i;
            if (f == 1) --realI;
            Object[] tempD = new Object[data.length];
            for (int j=0;j<data.length;++j){
                tempD[j] = data[j][i];
            }
            try{
                double[] quart = getQ(tempD);
                double q1 = quart[0];
                double q3 = quart[1];
                double intQ = q3-q1;
                for (int j=0;j<data.length;++j){
                    double val = Double.parseDouble((String) data[j][i]);
                    if (val>=q1-1.5*intQ && val<=q3+1.5*intQ) cData[j][realI] = String.valueOf(val);
                    else cData[j][realI] = "out";
                }
            }catch(NumberFormatException e){
                for (int j=0;j<data.length;++j) cData[j][i-1] = (String) data[j][i];
            }
        }
        return cData;
    }
    
    public HashMap<String, ArrayList<Integer>> getClasses(Object[][] data){
        HashMap<String, ArrayList<Integer>> classes = new HashMap<String, ArrayList<Integer>>();
        int c = data[0].length-1;
        for (int i=0;i<data.length;++i){
            if (!classes.containsKey(data[i][c])){
                ArrayList<Integer> temp = new ArrayList<Integer>();
                temp.add(i+1);
                classes.put(String.valueOf(data[i][c]), temp);
            }
            else {
                classes.get(data[i][c]).add(i+1);
            }
        }
        return classes;
    }
    
    
    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
    
    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        dataSource.removeAllItems();
        dataSource.addItem("");
        dataSource.addItem("BL.dat.txt");
        dataSource.addItem("HEART_stat.txt");

        attribute.removeAllItems();
        attribute.addItem("");

        attribute1.removeAllItems();
        attribute1.addItem("");

        action.removeAllItems();
        action.addItem("");
        action.addItem("Moyenne");
        action.addItem("Mediane");
        action.addItem("Mode");

        comboGraph.removeAllItems();
        comboGraph.addItem("");
        comboGraph.addItem("Histogramme");
        comboGraph.addItem("Boite à moustache");
        comboGraph.addItem("Diagramme de dispersion");
    }//GEN-LAST:event_formWindowOpened

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        try{
            Operations a=new Operations();
            if(action.getSelectedItem().equals("Moyenne")){
                try{
                    value.setText(String.valueOf(a.getMoyenne(data, attribute.getSelectedIndex()-1)));
                }catch(ArrayIndexOutOfBoundsException e){
                    JOptionPane.showMessageDialog(null,"Veuillez sélectionner un attribut !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (action.getSelectedItem().equals("Mediane")){
                try{
                    value.setText(String.valueOf(a.getMedian(data, attribute.getSelectedIndex()-1)));

                }catch(ArrayIndexOutOfBoundsException e){
                    JOptionPane.showMessageDialog(null,"Veuillez sélectionner un attribut !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                }
            }

            if(action.getSelectedItem().equals("Mode")){
                try{
                    Object[] modes = a.getMode(data, attribute.getSelectedIndex()-1);
                    String s=String.valueOf(modes[0]);
                    for (int i=1;i<modes.length;++i) s=s+" ; "+String.valueOf(modes[i]);
                    value.setText(s);
                }catch(ArrayIndexOutOfBoundsException e){
                    JOptionPane.showMessageDialog(null,"Veuillez sélectionner un attribut !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                }
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"On ne peut calculer la moyenne et la médiane que pour des attributs numériques !", "Erreur !", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_applyButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        real.clear();
        ordered.clear();
        attType.clear();
        classes.clear();
        
        attribute.removeAllItems();
        attribute.addItem("");
        
        attribute1.removeAllItems();
        attribute1.addItem("");
        
        File file = new File((String)(dataSource.getSelectedItem()));
        boolean first = true;
        boolean last = true;
        if (((String) dataSource.getSelectedItem()).equals("BL.dat.txt")) { first = false;}
        if (((String) dataSource.getSelectedItem()).equals("HEART_stat.txt")) { last = false;}
        BufferedReader in = null;
        try {
            in = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ContactEditorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String txt;
        ArrayList<String[]> dataList = new ArrayList<String[]>();
        
        try{
            while ((txt = in.readLine()) != null ){
                if(txt != null && txt.length()>0){
                    if (txt.charAt(0) != '@'){
                        if (txt.charAt(0) != '%'){
                            txt = txt.replace(" ","");
                            dataList.add(txt.split(","));
                        }
                        else{
                            if (txt.contains("Attributes types")){
                                while(!txt.contains("Variable")){
                                    txt = in.readLine();
                                    if (txt.contains("Real")){
                                        boolean b = true;
                                        int i=0;
                                        while(b){
                                            try{
                                                int val = Integer.parseInt(String.valueOf(txt.charAt(i)));
                                                b = false;
                                            }catch(NumberFormatException e){
                                                ++i;
                                            }
                                        }
                                        String[] sub = txt.substring(i).split(",");
                                        for (String s : sub) real.add(Integer.parseInt(s));
                                    }
                                    else if (txt.contains("Ordered")){
                                        boolean b = true;
                                        int i=0;
                                        while(b){
                                            try{
                                                int val = Integer.parseInt(String.valueOf(txt.charAt(i)));
                                                b = false;
                                            }catch(NumberFormatException e){
                                                ++i;
                                            }
                                        }
                                        String[] sub = txt.substring(i).split(",");
                                        for (String s : sub) ordered.add(Integer.parseInt(s));
                                    }
                                    else if (txt.contains("Binary")){
                                        boolean b = true;
                                        int i=0;
                                        while(b){
                                            try{
                                                int val = Integer.parseInt(String.valueOf(txt.charAt(i)));
                                                b = false;
                                            }catch(NumberFormatException e){
                                                ++i;
                                            }
                                        }
                                        String[] sub = txt.substring(i).split(",");
                                        for (String s : sub) attType.put(Integer.parseInt(s), new String[]{"B"});
                                    }
                                    else if (txt.contains("Nominal")){
                                        boolean b = true;
                                        int i=0;
                                        while(b){
                                            try{
                                                int val = Integer.parseInt(String.valueOf(txt.charAt(i)));
                                                b = false;
                                            }catch(NumberFormatException e){
                                                ++i;
                                            }
                                        }
                                        String[] sub = txt.substring(i).split(",");
                                        for (String s : sub) attType.put(Integer.parseInt(s), new String[]{"N"});
                                    }
                                }
                            }
                        }
                    }
                    else if (txt.startsWith("@attribute")){
                        attribute.addItem(txt.split(" ")[1]);
                        attribute1.addItem(txt.split(" ")[1]);
                    }
                }
            }
        }catch(IOException exc){
            Logger.getLogger(ContactEditorUI.class.getName()).log(Level.SEVERE, null, exc);
        }        
        
        data = new Object[dataList.size()][dataList.get(0).length];
        
        for (int i=0;i<data.length;++i){
            for(int j=0;j<data[0].length;++j){
                data[i][j] = dataList.get(i)[j];
            }
        }
        
        Object[] filler = new Object[data[0].length];
        Arrays.fill(filler, "");
        
        DefaultTableModel model = new DefaultTableModel(data, filler);
        dataTable.setModel(model);
        
        if (last==false) classes = getClasses(data);
        
        for (String s : classes.keySet()) System.out.println(s);
        
        cData = cleanData(data, first, last);
        kData = new String[data.length][data[0].length-1];
        for (int i=0;i<kData.length;++i){
            for (int j=0;j<kData[0].length;++j){
                kData[i][j] = String.valueOf(data[i][j]);
            }
        }
        
        for (int x : real){
            String[] temp = new String[3];
            int j = 0;
            while (cData[j][x-1].equals("out")) ++j;
            double max = Double.parseDouble(cData[j][x-1]);
            double min = Double.parseDouble(cData[j][x-1]);
            for (int i = j+1;i<cData.length;++i){
                if (!cData[i][x-1].equals("out")){
                    if (Double.parseDouble(cData[i][x-1])>max) max = Double.parseDouble(cData[i][x-1]);
                    if (Double.parseDouble(cData[i][x-1])<min) min = Double.parseDouble(cData[i][x-1]);
                }
            }
            temp[0] = "R";
            temp[1] = String.valueOf(max);
            temp[2] = String.valueOf(min);
            attType.put(x, temp);
        }
        
        for (int x : ordered){
            String[] temp = new String[2];
            ArrayList<String> r = new ArrayList<String>();
            double m = 0;
            
            for (int i=0;i<cData.length;++i){
                if (!cData[i][x-1].equals("out")){
                    if (!r.contains(cData[i][x-1])){
                        r.add(cData[i][x-1]);
                        ++m;
                    }
                }
            }
            temp[0] = "O";
            temp[1] = String.valueOf(m);
            attType.put(x, temp);
        }
    }//GEN-LAST:event_readButtonActionPerformed

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
        try{
            if(comboGraph.getSelectedItem().equals("Histogramme")){
                Object[][] dataD = new Object[data.length][data[0].length];
                for (int i=0;i<dataD.length;++i){
                    for(int j=0;j<dataD[0].length;++j){
                        dataD[i][j] = Double.parseDouble(String.valueOf(data[i][j]));
                    }
                }
                try{
                    Histogramme chart = new Histogramme( "Histogramme" , (String)attribute.getSelectedItem(), (String) attribute.getSelectedItem(), dataD,attribute.getSelectedIndex()-1);
                    chart.pack();
                    chart.setSize(graphPanel.getSize());
                    graphPanel.removeAll();
                    graphPanel.add(chart.getContentPane());
                    graphPanel.revalidate();
                    graphPanel.repaint();
                }catch(ArrayIndexOutOfBoundsException e){
                    JOptionPane.showMessageDialog(null,"Veuillez sélectionner un attribut !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                }
            }

            else if(comboGraph.getSelectedItem().equals("Boite à moustache")){
                Object[][] dataD = new Object[data.length][data[0].length];
                for (int i=0;i<dataD.length;++i){
                    for(int j=0;j<dataD[0].length;++j){
                        dataD[i][j] = dataD[i][j] = Double.parseDouble(String.valueOf(data[i][j]));
                    }
                }
                try{
                    Boxplot chart = new Boxplot("Boite à moustache",(String)attribute.getSelectedItem(),dataD,attribute.getSelectedIndex()-1);            
                    chart.pack( );
                    graphPanel.removeAll();
                    graphPanel.add(chart.getContentPane());
                    graphPanel.revalidate();
                    graphPanel.repaint();
                }catch(ArrayIndexOutOfBoundsException e){
                    JOptionPane.showMessageDialog(null,"Veuillez sélectionner un attribut !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                }
            }

            else if(comboGraph.getSelectedItem().equals("Diagramme de dispersion")){
                try{
                    Object[][] dataF = new Object[2][data.length];
                    int x = attribute.getSelectedIndex()-1;
                    int y = attribute1.getSelectedIndex()-1;
                    for (int i=0;i<data.length;++i){
                        dataF[0][i]=Float.parseFloat(String.valueOf(data[i][x]));
                        dataF[1][i]=Float.parseFloat(String.valueOf(data[i][y]));
                    }
                    ScatterPlot chart = new ScatterPlot("Diagramme de dispersion", (String) attribute.getSelectedItem(), (String) attribute1.getSelectedItem(), dataF);
                    chart.pack( );
                    graphPanel.removeAll();
                    graphPanel.add(chart.getContentPane());
                    graphPanel.revalidate();
                    graphPanel.repaint();
                }
                catch(ArrayIndexOutOfBoundsException e){
                    JOptionPane.showMessageDialog(null,"Veuillez sélectionner les deux attribut !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                }
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Le logiciel ne génère des diagrammes que pour les attributs numriques", "Erreur !", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_generateActionPerformed

    private void aprioriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprioriActionPerformed
        try{
            if (Integer.parseInt(pSuppTxt.getText())>=0 && Integer.parseInt(pSuppTxt.getText())<=100){
                ArrayList<String[]> database = new ArrayList<String[]>();
                transZone.setText("");
                aprioriZone.setText("");
                rulesZone.setText("");
                for (int i=0;i<cData.length;++i){
                    ArrayList<String> tempT = new ArrayList<String>();
                    String s = "T" + String.valueOf(i+1) + " : ";
                    if (!cData[i][0].equals("out")){
                        String it = "(1, " + cData[i][0] + ")";
                        s += it;
                        tempT.add(it);
                    }
                    for (int j=1;j<cData[0].length;++j){
                        if (!cData[i][j].equals("out")){
                            String it = "(" + String.valueOf(j+1) + ", " + cData[i][0] + ")";
                            s += " | " + it;
                            tempT.add(it);
                        }               
                    }

                    String[] trans = new String[tempT.size()];
                    for (int k=0;k<tempT.size();++k) trans[k] = tempT.get(k);
                    database.add(trans);

                    if (!transZone.getText().equals("")) transZone.append(s+"\n");
                    else transZone.setText(s+"\n");
                    transZone.append("\n");           
                }

                int supp = database.size()*Integer.parseInt(pSuppTxt.getText())/100;
                suppTxt.setText(String.valueOf(supp));

                long start = System.currentTimeMillis();
                Apriori a = new Apriori();
                ArrayList<String> uniqueItems = a.getUniqueItems(database);
                ArrayList<String[]> items = new ArrayList<String[]>();

                for (String s : uniqueItems) items.add(new String[]{s});
                aprioriZone.setText("C1\n");
                aprioriZone.append(a.affLT(items)+"\n");

                HashMap<String[], Integer> c = a.getItemsCount(items, database);
                aprioriZone.append("C1 Count\n");
                aprioriZone.append(a.affD(c)+"\n");
                
                HashMap<String[], Integer> oldC = new HashMap<String[], Integer>();
                HashMap<String[], Integer> resultC = new HashMap<String[], Integer>();

                ArrayList<Integer> value = new ArrayList<Integer>();
                for (Object o : c.values()) value.add((int) o);

                int iter = 1;

                boolean b = true;       

                while (b){
                    ArrayList<ArrayList<String[]>> d = a.getFrequent(c, supp);
                    ArrayList<String[]> frequent = new ArrayList<String[]>(d.get(0));
                    if (frequent.size()==1){
                        b=false;
                        resultC = a.copyD(c);
                    }
                    else if (frequent.size()==0){
                        b=false;
                        resultC = a.copyD(oldC);
                    }
                    else {
                       ArrayList<String[]> tabu = new ArrayList<String[]>(d.get(1));
                       aprioriZone.append("L" + String.valueOf(iter)+"\n");
                       aprioriZone.append(a.affLT(frequent)+"\n");
                       ++iter;

                       items = a.getItems(frequent, tabu);
                       aprioriZone.append("C" + String.valueOf(iter)+"\n");
                       aprioriZone.append(a.affLT(items)+"\n");
                       
                       oldC = a.copyD(c);
                       c = a.getItemsCount(items, database);
                       aprioriZone.append("C" + String.valueOf(iter)+" Count\n");
                       aprioriZone.append(a.affD(c)+"\n");

                       value.clear();
                       for (Object o : c.values()) value.add((int) o);
                    }
                }
                
                ArrayList<String[]> patterns = new ArrayList<String[]>();
                aprioriZone.append("RESULT :\n");
                for (String[] t : resultC.keySet()){
                    patterns.add(t);
                    aprioriZone.append(a.affT(t)+"\n");
                }
                
                int i = 1;
                for (String[] p : patterns){
                    String aff = "Pattern " + String.valueOf(i) + " : " + a.affT(p) + "\n";
                    ArrayList<String[]> temp = a.getAllSubsets(p);
                    for (String[] t : temp){
                        int conf = resultC.get(p)/a.itemCount(t, database)*100;
                        aff += a.affT(t) + " -> " + a.affT(a.substract(t, p)) + " : " + String.valueOf(conf) + "%\n";
                    }
                    if (!rulesZone.getText().equals("")) rulesZone.append(aff+"\n");
                    else rulesZone.setText(aff+"\n");
                    ++i;
                }
                long end = System.currentTimeMillis();
                long totalTime = (end-start);
                timeTxt.setText(String.valueOf((float)totalTime/1000));
            }
            else JOptionPane.showMessageDialog(null,"Veuillez donner un support entre 0% et 100% !", "Erreur !", JOptionPane.ERROR_MESSAGE);
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null,"Il faut d'abord lire un fichier !", "Erreur !", JOptionPane.ERROR_MESSAGE);
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Veuillez donner un support entre 0% et 100% !", "Erreur !", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_aprioriActionPerformed

    private void meanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanButtonActionPerformed
   //     try{
            int k = Integer.parseInt(kTxt.getText());
            if (k>1){
                Kmeans kmeans = new Kmeans();
                long start = System.currentTimeMillis();
                ArrayList result = kmeans.algorithm(kData, attType, k);         
                long end = System.currentTimeMillis();
                long totalTime = end-start;
                
                ArrayList<ArrayList<Integer>> groups = (ArrayList<ArrayList<Integer>>) result.get(0);
                String[][] centroids = (String[][]) result.get(1);
                
                double perf = 0;
                for (int i=0;i<groups.size();++i){
                    for (int j=0;j<groups.get(i).size();++j){
                        perf += kmeans.distance(kData[groups.get(i).get(j)-1], centroids[i], attType);
                    }
                }                
                
                String affRes = "";
                for (int i=0;i<groups.size();++i){
                    affRes += "Cluster "+String.valueOf(i+1)+" :\n";
                    for (int j=0;j<groups.get(i).size();++j){
                        affRes += String.valueOf(groups.get(i).get(j))+"\n";
                    }
                    affRes += "\n";
                }

                resZone.setText(affRes);
                perfTxt.setText(String.valueOf(perf));
                timeTxt2.setText(String.valueOf((float) totalTime/1000));
            }
            else JOptionPane.showMessageDialog(null,"Veuillez donnez un k entier supérieur à 1 !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                
    //    }catch(NullPointerException e){
     //       JOptionPane.showMessageDialog(null,"Il faut d'abord lire un fichier !", "Erreur !", JOptionPane.ERROR_MESSAGE);
      //  }catch(NumberFormatException e){
      //      JOptionPane.showMessageDialog(null,"Veuillez donnez un k entier supérieur à 1 !", "Erreur !", JOptionPane.ERROR_MESSAGE);
       // }
    }//GEN-LAST:event_meanButtonActionPerformed

    private void medButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medButtonActionPerformed
        try{
            int k = Integer.parseInt(kTxt.getText());
            if (k>1){
                Kmedoids kmedoids = new Kmedoids();
                long start = System.currentTimeMillis();
                ArrayList result = kmedoids.algorithm(kData, attType, k);
                long end = System.currentTimeMillis();
                long totalTime = end-start;
                
                ArrayList<ArrayList<Integer>> groups = (ArrayList<ArrayList<Integer>>) result.get(0);
                ArrayList<Integer> medId = (ArrayList<Integer>) result.get(1);
                
                double perf = 0;
                
                for (int i=0;i<groups.size();++i){
                    for (int j=0;j<groups.get(i).size();++j){
                        perf += kmedoids.distance(kData[groups.get(i).get(j)-1], kData[medId.get(i)-1], attType);
                    }
                }                
               
                String affRes = "";
                for (int i=0;i<groups.size();++i){
                    affRes += "Cluster "+String.valueOf(i+1)+" :\n";
                    for (int j=0;j<groups.get(i).size();++j){
                        affRes += String.valueOf(groups.get(i).get(j))+"\n";
                    }
                    affRes += "\n";
                }

                resZone.setText(affRes);               
                perfTxt.setText(String.valueOf(perf));
                timeTxt2.setText(String.valueOf((float) totalTime/1000));
            }
            else JOptionPane.showMessageDialog(null,"Veuillez donnez un k entier supérieur à 1 !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null,"Il faut d'abord lire un fichier !", "Erreur !", JOptionPane.ERROR_MESSAGE);
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Veuillez donnez un k entier supérieur à 1 !", "Erreur !", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_medButtonActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new ContactEditorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> action;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton apriori;
    private javax.swing.JScrollPane aprioriPane;
    private javax.swing.JTextArea aprioriZone;
    private javax.swing.JLabel attLabel;
    private javax.swing.JComboBox<String> attribute;
    private javax.swing.JComboBox<String> attribute1;
    private javax.swing.JComboBox<String> comboGraph;
    private javax.swing.JScrollPane dataPanel;
    private javax.swing.JComboBox<String> dataSource;
    private javax.swing.JTable dataTable;
    private javax.swing.JLabel datasetLabel;
    private javax.swing.JLabel derLabel;
    private javax.swing.JButton generate;
    private javax.swing.JLabel graphLabel;
    private javax.swing.JScrollPane graphPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel kLabel;
    private javax.swing.JTextField kTxt;
    private javax.swing.JButton meanButton;
    private javax.swing.JButton medButton;
    private javax.swing.JPanel pP1;
    private javax.swing.JPanel pP2;
    private javax.swing.JTabbedPane pP3;
    private javax.swing.JLabel pSuppLabel;
    private javax.swing.JTextField pSuppTxt;
    private javax.swing.JLabel perfLabel;
    private javax.swing.JTextField perfTxt;
    private javax.swing.JButton readButton;
    private javax.swing.JLabel resLabel;
    private javax.swing.JScrollPane resPane;
    private javax.swing.JTextArea resZone;
    private javax.swing.JLabel rulesLabel;
    private javax.swing.JScrollPane rulesPane;
    private javax.swing.JTextArea rulesZone;
    private javax.swing.JLabel suppLabel;
    private javax.swing.JTextField suppTxt;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeLabel2;
    private javax.swing.JTextField timeTxt;
    private javax.swing.JTextField timeTxt2;
    private javax.swing.JLabel transLabel;
    private javax.swing.JScrollPane transPane;
    private javax.swing.JTextArea transZone;
    private javax.swing.JTextField value;
    // End of variables declaration//GEN-END:variables
}
